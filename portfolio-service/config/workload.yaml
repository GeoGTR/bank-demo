#@ load("@ytt:data", "data")
---
apiVersion: carto.run/v1alpha1
kind: Workload
metadata:
  name: #@ data.values.portfolioServiceDeployName
  namespace: #@ data.values.namespaceToDeploy
  labels:
    #@ if data.values.addPostgresServiceClaim:
    apps.tanzu.vmware.com/workload-type: web-postgres
    postgres/storage-class-name: #@ data.values.postgresStorageClassName
    postgres/db-name: #@ data.values.postgresDBName
    postgres/pg-version: #@ data.values.postgresVersion
    #@ else:
    apps.tanzu.vmware.com/workload-type: web
    #@ end
    app.kubernetes.io/part-of: portfolio-service
    #@ if data.values.hasTestsPortfolioService:
    apps.tanzu.vmware.com/has-tests: "true"
    #@ end
spec:
  params:
  - name: annotations
    value:
      #@ if data.values.autoScalingClass == "kpa":
      #@ if data.values.autoScalingMinScale:
      autoscaling.knative.dev/minScale: #@ data.values.autoScalingMinScale
      #@ end
      #@ if data.values.autoScalingMaxScale:
      autoscaling.knative.dev/maxScale: #@ data.values.autoScalingMaxScale
      #@ end
      #@ if data.values.autoScalingScaleDownDelay:
      autoscaling.knative.dev/scaleDownDelay: #@ data.values.autoScalingScaleDownDelay
      #@ end
      #@ end

      #@ if data.values.autoScalingClass == "hpa":
      autoscaling.knative.dev/class: hpa.autoscaling.knative.dev
      autoscaling.knative.dev/metric: cpu
      #@ end
  build:
    env:
    - name: BP_JVM_VERSION
      #@ if data.values.javaVersion == 17:
      value: "17.*"
      #@ end
      #@ if data.values.javaVersion == 11:
      value: "11.*"
      #@ end
  env:
    - name: WAVEFRONT_TOKEN
      value: #@ data.values.wavefrontToken
    - name: spring.cloud.config.uri
      value: #@ "http://config-server."+data.values.namespaceToDeploy+".svc.cluster.local"
    - name: spring.cloud.config.fail-fast
      value: 'true'
    - name: spring.cloud.config.retry.max-interval
      value: "10000"
    - name: spring.cloud.config.retry.max-attempts
      value: "2000"
    #@ if data.values.eurekaState:
    - name: EUREKA_URL
      value: #@ data.values.eurekaURL
    #@ end
    #@ if data.values.addPostgresServiceClaim:
    - name: spring.jpa.database-platform
      value: 'org.hibernate.dialect.PostgreSQLDialect'
    #@ end
    #@ if data.values.portfolioServiceDeployState == "existingPortfolioService":
    - name: accountServiceName
      value: #@ data.values.accountServiceName
    - name: quoteServiceName
      value: #@ data.values.quoteServiceName
    #@ end
    - name: DEP_NS
      value: #@ data.values.namespaceToDeploy
  source:
    git:
      url: #@ data.values.gitRepo
      ref:
        branch: #@ data.values.branchNamePortfolioService
    subPath: portfolio-service
  #@ if data.values.addPostgresServiceClaim:
  serviceClaims:
  - name: #@ data.values.portfolioServiceDeployName + "-postgres-claim"
    ref:
      apiVersion: sql.tanzu.vmware.com/v1
      kind: Postgres
      name: #@ data.values.parentApp + "-postgres-db"
  #@ end